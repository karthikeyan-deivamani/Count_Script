#----------------------------------------------------------------------------------------------------------------------------
#  E N E R G Y 2 1   B . V .
# ---------------------------------------------------------------------------------------------------------------------------
#
#  Script      : Generic Metering Point
#
#  Customer    : Energy21
#  Environment :
#  Author      : VA
#  Date        : 19-01-2024
#  Version     : 0.1
#  Info        : servicedesk@energy21.nl
#  GENnr       : na
#
#  Input       : Gridpoint and sales contract details
#  Inputloc    : process
#  Output      : CSV
#  Outputloc   : output loc in var
#
#  Revisions:
#  Author   Date        Version  Description
#  -------  ----------  ------   -------------
#  VA       19-01-2024  0.1      Initial

# -------------------------------------------------------------------------------------------------------------------------
# WORKSHEET VARIABLES
# -------------------------------------------------------------------------------------------------------------------------

VAR CheckYear MaxNrMeters DATABASE_TYPE DATABASE_SCHEMA DATAFILE
DEF DATAFILE  = "C:\Users\VasishArvind\meterpointinfo.xlsx"
# Batch size of DBIMPORT:
DEF MaxNrMeters = 50
# Choose MSSQL or ORACLE
DEF DATABASE_TYPE = "MSSQL"
DEF DATABASE_SCHEMA = %DBSCHEMA$%

# -------------------------------------------------------------------------------------------------------------------------
# End of parameters (user settings)      -       DO NOT EDIT BELOW THIS LINE
# -------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------
# SCRIPT PARAMETERS
# -------------------------------------------------------------------------------------------------------------------------
DBCREATESCRIPTPARAMETER 1 "MAIL"             "vasish.arvind@energy21.com"       "Email address to send mail afer receiving message"
DBCREATESCRIPTPARAMETER 1 "CC"               ""       "Email CC address to send mail afer receiving message"
DBCREATESCRIPTPARAMETER 1 "Sender"           "no-reply@energy21.com"       "Define the sender of the e-mail(s) that will be sent."
DBCREATESCRIPTPARAMETER 1 "Folder"           "C:\Users\VasishArvind\"       "Folder used for storing email body text."
# ---------------------------------------------------------------------------------------------------------------------------
# End of parameters (user settings)
# ---------------------------------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------------------------------
# SCRIPT VARIABLES
# -------------------------------------------------------------------------------------------------------------------------

VAR sql[] sqlstr test maxcol Counting startrow endrow ImportStr logtext timecheck
VAR i_type Type[] ImportType[] totalcount NrGP ActiveMetersTotal ActiveMetersTemp data nextrow
VAR ActiveMetersTotalCat i TM_meters_withNaNs check StartYear EndYear
VAR NrMeters gridcolumn CountDaysValues x LastColumn text BodyText Subject KeepGrid NrGPpower NrGPgas PRFpower PRFgas
VAR query result result2 mnd_now year_now day Startdate Enddate TMTpower TMTgas totsales totsales_wogp pgppower pgpgas totalcountpower totalcountgas

#-------------------------------------------------------------Function-------------------------------------------------------------------------------------------------
FUNCTION FUNC_SEND_MAIL f_Result = f_Addresses f_Subject f_Sender f_AddressesCC f_BodyText f_Attachment
  # This function sends e-mails through SMTP using global settings and elements of a specific process.
  # The e-mail addresses should be separated by a comma (for both the TO and CC).
  # If the subject is emtpy, this function will set the subject to 'GEN_eBase_Mailing'
  # The sender of the e-mail can be empty. Default global setting will then be used.
  # The bodytext variable should indicate towards a file that is stored on a specified network location.
  # If an attachment should be added, the directory and filename are needed to add to an e-mail
  # If all goes well the result will return the text ""

  # Declare variables
  VAR f_continue f_login

  # Set the processing variable to its default setting
  DEF f_continue = 0

  # Perform checks on input
  # f_Addresses
  IF (%f_Addresses$% == "")
    DEF f_Result   = "There is no e-mail address defined! Mailing function terminated..."
    DEF f_continue = 1
  ENDIF
  # f_Subject
  IF (%f_Subject$% == "")
    DEF f_Subject = "EBASE_Mailing"
  ENDIF
  # f_Sender
  IF (%f_Sender$% == "")
    DEF f_Sender = %GLOB_MAIL_SENDER$%
  ENDIF
  # f_BodyText
  IF (%f_BodyText$% != "")
    IF NOT FILEEXISTS(%f_BodyText$%)
      DEF f_Result   = "BodyText should be used but the BodyText file doesn't exist or is not accessible by EBASE ('" + %f_BodyText$% + "'). Mailing function terminated..."
      DEF f_continue = 1
    ENDIF
  ENDIF
  # f_Attachment
  IF (%f_Attachment$% != "")
    IF NOT FILEEXISTS(%f_Attachment$%)
      DEF f_Result   = "Attachment should be added but the file doesn't exist or is not accessible by EBASE ('" + %f_Attachment$% + "'). Mailing function terminated..."
      DEF f_continue = 1
    ENDIF
  ENDIF

  # Check if mail should be sent
  IF (%f_continue% == 0)
    # Send e-mail
    DEF f_login = %GLOB_MAIL_LOGINNAME$% + ";" + %GLOB_MAIL_PASSWORD$%
    SMTPSENDMAIL f_Result = %f_Addresses$% %f_login$% %GLOB_MAIL_HOST$% %GLOB_MAIL_SMTPPORT$% %f_Subject$% %f_Sender$% %f_AddressesCC$% %GLOB_MAIL_TIMEOUT$% %f_BodyText$% %f_Attachment$%
  ENDIF

ENDFUNCTION
#--------------------------------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------------------------------
# START OF SCRIPT
# -------------------------------------------------------------------------------------------------------------------------

DBREFRESH
DEF logtext = "Checking subscription parameters for year "+%CheckYear$%+" in database schema "+%DBSCHEMA$%+"."
INFOLINE 1 %logtext$%

#Loop time period of 12 months and break down monthly
NEWGRID 25 100 64
FOR i = 1 TO 12
DEF query = "SELECT dateadd(month,datediff(month,0,getdate())-'"+%i$%+"',0)"
DBSQLSELECT result = 1 1 %query$%
DEFXY Startdate = 1 1

DEF query = "SELECT dateadd(month,datediff(month,-1,getdate())-'"+%i$%+"',-1)"
DBSQLSELECT result = 2 1 %query$%
DEFXY Enddate = 2 1

# ---------------------------------------
# Check amount of all TMT Power
# ---------------------------------------
NEWGRID 1 1 80
DEF sql[1] = "SELECT COUNT(DISTINCT(m.CODE)) FROM "+%DATABASE_SCHEMA$%+".D_METER m JOIN "+%DATABASE_SCHEMA$%+".D_METERPRODUCT mp ON m.METERPRODUCTNR = mp.NR WHERE mp.PRODUCTNAME = 'Electricity'"
DEF sql[2] = "WHERE m.STARTDATE >= CONVERT (DATETIME, '"+%Startdate$%+"', 120) AND m.ENDDATE <= CONVERT (DATETIME, '"+%Enddate$%+"', 120)"
DEF sql[0] = 2
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF (%result$%!="OK")
  ERRORLINE 1 %result$%
  STOP
ENDIF
DEFXY TMTpower = 1 1
DEF logtext = "Total TMT 'Power': "+%TMTpower$%
INFOLINE 1 %logtext$%

# ---------------------------------------
# Check amount of all TMT Gas
# ---------------------------------------
NEWGRID 1 1 80
DEF sql[1] = "SELECT COUNT(DISTINCT(m.CODE)) FROM "+%DATABASE_SCHEMA$%+".D_METER m JOIN "+%DATABASE_SCHEMA$%+".D_METERPRODUCT mp ON m.METERPRODUCTNR = mp.NR WHERE mp.PRODUCTNAME = 'Gas'"
DEF sql[2] = "WHERE m.STARTDATE >= CONVERT (DATETIME, '"+%Startdate$%+"', 120) AND m.ENDDATE <= CONVERT (DATETIME, '"+%Enddate$%+"', 120)"
DEF sql[0] = 2
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF (%result$%!="OK")
  ERRORLINE 1 %result$%
  STOP
ENDIF
DEFXY TMTgas = 1 1
DEF logtext = "Total TMT 'gas': "+%TMTgas$%
INFOLINE 1 %logtext$%

# ---------------------------------------
# Check amount of all Profiled EAN Power
# ---------------------------------------
NEWGRID 1 1 80
DEF sql[1] = "SELECT COUNT(DISTINCT(gp.EANCODE)) FROM "+%DATABASE_SCHEMA$%+".D_GRIDPOINT gp"
DEF sql[2] = "JOIN "+%DATABASE_SCHEMA$%+".D_GRIDPOINTCONNECTION dg ON dg.GRIDPOINTNR = gp.NR JOIN SUP_NL.D_PHYSICALPRODUCT DP ON dp.NR = gp.PHYSICALPRODUCTNR"
DEF sql[3] = "WHERE dg.SETTLEMENTMETHOD = 1 AND DP.PRODUCTID = 0"
DEF sql[0] = 3
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF (%result$%!="OK")
  ERRORLINE 1 %result$%
  STOP
ENDIF
DEFXY PRFpower = 1 1
DEF logtext = "Total PRF 'Power': "+%PRFpower$%
INFOLINE 1 %logtext$%

# ---------------------------------------
# Check amount of all Profiled EAN Gas
# ---------------------------------------
NEWGRID 1 1 80
DEF sql[1] = "SELECT COUNT(DISTINCT(gp.EANCODE)) FROM "+%DATABASE_SCHEMA$%+".D_GRIDPOINT gp"
DEF sql[2] = "JOIN "+%DATABASE_SCHEMA$%+".D_GRIDPOINTCONNECTION dg ON dg.GRIDPOINTNR = gp.NR JOIN SUP_NL.D_PHYSICALPRODUCT DP ON dp.NR = gp.PHYSICALPRODUCTNR"
DEF sql[3] = "WHERE dg.SETTLEMENTMETHOD = 1 AND DP.PRODUCTID = 1"
DEF sql[0] = 3
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF (%result$%!="OK")
  ERRORLINE 1 %result$%
  STOP
ENDIF
DEFXY PRFgas = 1 1
DEF logtext = "Total PRF 'Gas': "+%PRFgas$%
INFOLINE 1 %logtext$%

# ---------------------------------------
#Check the amount of all sales contract
# ---------------------------------------
DEF sql[1] = "SELECT COUNT(DISTINCT(c.INTERNALCODE)) FROM "+%DATABASE_SCHEMA$%+".X_CONTRACT c"
DEF sql[2] = "WHERE STARTDATE >= CONVERT (DATETIME, '"+%Startdate$%+"', 120) AND m.ENDDATE <= CONVERT (DATETIME, '"+%Enddate$%+"', 120)"
DEF sql[0] = 2
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF (%result$%!="OK")
  ERRORLINE 1 %result$%
  STOP
ENDIF
DEFXY totsales = 1 1
DEF logtext = "Total sales contract: "+%totsales$%
INFOLINE 1 %logtext$%

# ---------------------------------------------------------------
#Check the amount of all sales contract WITHOUT linked gridpoints
# ---------------------------------------------------------------
DEF sql[1] = "SELECT COUNT(DISTINCT(c.INTERNALCODE)) FROM "+%DATABASE_SCHEMA$%+".X_CONTRACT c"
DEF sql[2] = "WHERE STARTDATE >= CONVERT (DATETIME, '"+%Startdate$%+"', 120) AND m.ENDDATE <= CONVERT (DATETIME, '"+%Enddate$%+"', 120)"
DEF sql[3] = "AND c.SCOREDBYAPPUSER = 0"
DEF sql[0] = 3
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF (%result$%!="OK")
  ERRORLINE 1 %result$%
  STOP
ENDIF
DEFXY totsales_wogp = 1 1
DEF logtext = "Total sales contract WITHOUT linked gridpoints: "+%totsales_wogp$%
INFOLINE 1 %logtext$%

# ---------------------------------------
# Check amount of active gridpoints
# ---------------------------------------

DEF sql[1] = "SELECT COUNT(DISTINCT(gp.EANCODE)) FROM "+%DATABASE_SCHEMA$%+".D_GRIDPOINT gp "
DEF sql[2] = "JOIN "+%DATABASE_SCHEMA$%+".D_SUPPLYCONTRACT SC ON SC.GRIDPOINTNR = gp.NR "
DEF sql[3] = "JOIN "+%DATABASE_SCHEMA$%+".D_PHYSICALPRODUCT DP ON dp.NR = gp.PHYSICALPRODUCTNR "
IF UPPERCASE(%DATABASE_TYPE$%) == "ORACLE"
  DEF sql[4] = " WHERE SC.STARTDATE <= TO_DATE ('"+%Enddate$%+"', 'YYYY-MM-DD') "
  DEF sql[5] = " AND SC.ENDDATE >= TO_DATE ('"+%Startdate$%+"', 'YYYY-MM-DD') "
  DEF sql[6] = " AND SC.ENDDATE >= SC.STARTDATE "
ELSE
  IF  UPPERCASE(%DATABASE_TYPE$%) == "MSSQL"
    DEF sql[4] = "WHERE SC.STARTDATE <= CONVERT (DATETIME, '"+%Enddate$%+"', 120) "
    DEF sql[5] = "AND SC.ENDDATE >= CONVERT (DATETIME, '"+%Startdate$%+"', 120) "
    DEF sql[6] = "AND SC.ENDDATE >= SC.STARTDATE "
  ENDIF
ENDIF
DEF sql[7] = "AND DP.PRODUCTID = 0"
DEF sql[0] = 7
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF %test$% != "OK"
  ERRORLINE 1 %test$%
ENDIF

DEFXY NrGPpower = 1 1
DEF logtext = "Total active 'Electricity' gridpoints: "+%NrGPpower$%
INFOLINE 1 %logtext$%


DEF sql[1] = "SELECT COUNT(DISTINCT(gp.EANCODE)) FROM "+%DATABASE_SCHEMA$%+".D_GRIDPOINT gp "
DEF sql[2] = "JOIN "+%DATABASE_SCHEMA$%+".D_SUPPLYCONTRACT SC ON SC.GRIDPOINTNR = gp.NR "
DEF sql[3] = "JOIN "+%DATABASE_SCHEMA$%+".D_PHYSICALPRODUCT DP ON dp.NR = gp.PHYSICALPRODUCTNR "
IF UPPERCASE(%DATABASE_TYPE$%) == "ORACLE"
  DEF sql[4] = " WHERE SC.STARTDATE <= TO_DATE ('"+%Enddate$%+"', 'YYYY-MM-DD') "
  DEF sql[5] = " AND SC.ENDDATE >= TO_DATE ('"+%Startdate$%+"', 'YYYY-MM-DD') "
  DEF sql[6] = " AND SC.ENDDATE >= SC.STARTDATE "
ELSE
  IF  UPPERCASE(%DATABASE_TYPE$%) == "MSSQL"
    DEF sql[4] = "WHERE SC.STARTDATE <= CONVERT (DATETIME, '"+%Enddate$%+"', 120) "
    DEF sql[5] = "AND SC.ENDDATE >= CONVERT (DATETIME, '"+%Startdate$%+"', 120) "
    DEF sql[6] = "AND SC.ENDDATE >= SC.STARTDATE "
  ENDIF
ENDIF
DEF sql[7] = "AND DP.PRODUCTID = 1"
DEF sql[0] = 7
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
NEWGRID 1 1 80
DBSQLSELECT test = 1 1 %sqlstr$%
IF %test$% != "OK"
  ERRORLINE 1 %test$%
ENDIF

DEFXY NrGPgas = 1 1
DEF logtext = "Total active 'Gas' gridpoints: "+%NrGPgas$%
INFOLINE 1 %logtext$%

# ---------------------------------------
# Check amount of active prices
# ---------------------------------------

MAKEARRAYOFSTRING Type[] = "Prices" ";"
MAKEARRAYOFSTRING ImportType[] = "12" ";"

FOR i_type = 1 TO %Type[0]%

  NEWGRID 1 1 80
  CLEARARRAY sql[]
  DEF ActiveMetersTotal = ""

  IF %Type[i_type]$% == "Prices"
    DEF sql[1] = "SELECT CODE FROM "+%DATABASE_SCHEMA$%+".D_PRICE WHERE PRICETYPE <> 1 "
    DEF sql[0] = 1
  ENDIF
  MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "

  DBSQLSELECT test = 1 1 %sqlstr$%
  IF %test$% != "OK"
    ERRORLINE 1 %test$%
  ENDIF

  # ---------------------------------------
  # Check how many prices actually received data
  # Check all prices but to keep it from running in a time out we check the metes in batches.
  # ---------------------------------------

  # initial values:
  DEF Counting = 0
  DEF startrow = 1
  DEF endrow = 0


  WHILE %endrow% < %LASTROW%

    DEF endrow = %startrow% + %MaxNrMeters% - 1
    IF %endrow% > %LASTROW%
      DEF endrow = %LASTROW%
    ENDIF

    COUNTCOLUMNS MaxCol = 1
    COPYCELLSTOVAR ImportStr = 1 1 %startrow% %endrow%
    COPYCELLSTOVAR Data = 1 %MaxCol% %startrow% %endrow% ";" "|"
    COPYCELLS 1 %MaxCol% 1 %LASTROW%

    # with this period and NaN count, you can easily check if a meter received any data this year.
    DBIMPORT test = %ImportStr$% "yyyy.mm.dd" "hh:mm" %ImportType[i_type]% %StartYear$% %EndYear$% PX 0 0 1 1 "0" "" "" "0" "0" "" "" "0"
    IF %test% < 0
      DEF logtext = "Count before block: " + %Counting$%
      INFOLINE 1 %logtext$%
      DEF logtext = "Checked < " + %startrow$%
      INFOLINE 1 %logtext$%
      DEF logtext = "Error on DBIMPORT " + %test$%
      ERRORLINE 1 %logtext$%
    ENDIF

    # remove empty meters
    DELETECOLUMNS 1 2
    COUNTCOLUMNS maxcol = 1
    MATRIX2COLUMN 1 %maxcol% 1 %LASTROW% 1
    COLUMN2MATRIX 1 1 %LASTROW% 0 2
    #
    PASTECELLSFROMVAR Data 3 1 ";" "|"

    DELETEROWS 1 %LASTROW% 2 "NaN" 1
    IF %LASTROW% > 0
      COPYCELLSTOVAR ActiveMetersTemp = 1 1 1 %LASTROW% ","
      DEF ActiveMetersTotal = %ActiveMetersTotal$% + "," + %ActiveMetersTemp$%
    ENDIF

    # add remaining meters to count an reset the grid
    DEF Counting = %Counting% + %LASTROW%
    DEF startrow = %startrow% + %MaxNrMeters%
    NEWGRID 1 1 80
    PASTECELLS 1 1
    IF %startrow% > %LASTROW%
      # check if we are done
      BREAK
    ENDIF

  ENDWHILE

  NEWGRID 1 1 80
  PASTECELLSFROMVAR ActiveMetersTotal 1 1 ","

  DEF logtext = "Number of active "+%Type[i_type]$%+": " + %Counting$% + " / " + %LASTROW$%
  INFOLINE 1 %logtext$%
  DEF totalcount = %totalcount% +  %Counting%
NEXT

# -------------------------------------------------------------------------------------------------
# Check amount of active 'Electricity' telemetric meters
# -------------------------------------------------------------------------------------------------

NEWGRID 1 1 80
CLEARARRAY sql[]
DEF ActiveMetersTotal = ""

DEF sql[1] = "SELECT m.CODE, mp.PRODUCTNAME, seg.DESCRIPTION FROM "+%DATABASE_SCHEMA$%+".D_METER m "
DEF sql[2] = " LEFT JOIN "+%DATABASE_SCHEMA$%+".D_METERPRODUCT mp on m.METERPRODUCTNR = mp.NR "
DEF sql[3] = " LEFT JOIN "+%DATABASE_SCHEMA$%+".D_METERSEGMETER seglink on m.NR = seglink.METERNR "
DEF sql[4] = " LEFT JOIN "+%DATABASE_SCHEMA$%+".D_METERSEGMENT seg on seglink.SEGNR = seg.NR "
DEF sql[5] = " WHERE m.METERTYPE = 0 AND seg.ADMNR = 0 "
# Only check on startdate to exclude histotic meters, meters from the new year will be excluded based on data content
IF UPPERCASE(%DATABASE_TYPE$%) == "ORACLE"
  DEF sql[6] = " AND m.RECEIVEDATE >= TO_DATE('"+%StartYear$%+"','YYYY-MM-DD')"
ELSE
  IF  UPPERCASE(%DATABASE_TYPE$%) == "MSSQL"
    DEF sql[6] = " AND m.RECEIVEDATE >= CONVERT(DATETIME, '"+%StartYear$%+"', 120)"
  ENDIF
ENDIF
DEF sql[8] = " AND  mp.PRODUCTID = 1"
DEF sql[0] = 8
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
#INFOLINE 1 %sqlstr$%
DBSQLSELECT test = 1 1 %sqlstr$%
IF %test$% != "OK"
  ERRORLINE 1 %test$%
ENDIF
DEF TM_meters_withNaNs = %LASTROW%

# ---------------------------------------
# Check how many meters actually received data
# Check all meters but to keep it from running in a time out we check the metes in batches.
# ---------------------------------------

DEF Counting = 0
DEF startrow = 1
DEF endrow = 0

DEF logtext = "This amount of 'Electricity' meters will be checked for data: " + %LASTROW$%
INFOLINE 1 %logtext$%

WHILE %endrow% < %LASTROW%

  DEF endrow = %startrow% + %MaxNrMeters% - 1
  IF %endrow% > %LASTROW%
    DEF endrow = %LASTROW%
  ENDIF

  COUNTCOLUMNS MaxCol = 1
  COPYCELLSTOVAR ImportStr = 1 1 %startrow% %endrow%
  COPYCELLSTOVAR Data = 1 %MaxCol% %startrow% %endrow% ";" "|"
  COPYCELLS 1 %MaxCol% 1 %LASTROW%

  # with this period and NaN count, you can easily check if a meter received any data this year.
  DBIMPORT test = %ImportStr$% "yyyy.mm.dd" "hh:mm" 1 %StartYear$% %EndYear$% DX 0 0 1 1 "0" "" "" "0" "0" "" "0" "0"
  IF %test% < 0
    DEF logtext = "Count before block: " + %Counting$%
    INFOLINE 1 %logtext$%
    DEF logtext = "Checked < " + %startrow$%
    INFOLINE 1 %logtext$%
    DEF logtext = "Error on DBIMPORT " + %test$%
    ERRORLINE 1 %logtext$%
  ENDIF

  COUNTCOLUMNS LastColumn = 1
  REPLACE "0" "" 3 %LastColumn% 2 %LASTROW%
  FOR x = 3 TO %LastColumn%
    GRIDANALYSIS 1 %x% %x% 2 %LASTROW% 0 1 0 1 1 0 0
    DEF CountDaysValues = %ANALYSEPOSVALUES% + %ANALYSENEGVALUES% + %ANALYSENREMPTYCELLS%
    IF (%CountDaysValues%<14)
      WRITECELLS "NaN" %x% %x% 2 %LASTROW% 0
    ELSE
      IF (%CountDaysValues%>0)
        REPLACE "NaN" "0" %x% %x% 2 %LASTROW%
      ENDIF
    ENDIF
  NEXT
  COMPRESSROWS 2 %LASTROW% 0 1 0

  # remove empty meters
  DELETECOLUMNS 1 2
  COUNTCOLUMNS maxcol = 1
  MATRIX2COLUMN 1 %maxcol% 1 %LASTROW% 1
  COLUMN2MATRIX 1 1 %LASTROW% 0 2
  #
  PASTECELLSFROMVAR Data 3 1 ";" "|"
  DELETEROWS 1 %LASTROW% 2 "NaN" 1
  # add remaining meters to count an reset the grid
  DEF Counting = %Counting% + %LASTROW%
  IF %LASTROW% > 0

    COPYCELLSTOVAR ActiveMetersTemp = 1 1 1 %LASTROW% ","
    DEF ActiveMetersTotal = %ActiveMetersTotal$% + "," + %ActiveMetersTemp$%
    DEF nextrow = %LASTROW% + 1
    PASTECELLSFROMVAR ActiveMetersTotalCat 3 %nextrow% ";" "|"
    COPYCELLSTOVAR ActiveMetersTotalCat = 3 5 1 %LASTROW% ";" "|"

  ENDIF
  DEF startrow = %startrow% + %MaxNrMeters%
  NEWGRID 1 1 80
  PASTECELLS 1 1
  IF %startrow% > %LASTROW%
    # check if we are done
    BREAK
  ENDIF
  DEF logtext = "Number of meters checked for data: "+%startrow$%+"/"+ %LASTROW$%
  INFOLINE 1 %logtext$%

ENDWHILE

NEWGRID 1 1 80
PASTECELLSFROMVAR ActiveMetersTotalCat 1 1 ";" "|"
COLUMNTYPE 1 1 0
COLUMNTYPE 2 3 1
SORT 1 3 1 %LASTROW% 0 1 2 0
SORT 1 3 1 %LASTROW% 0 1 3 2

JOINCOLUMNS 2 3 1 %LASTROW% 1_
WRITECELLS "1" 1 1 1 %LASTROW%
COLUMNTYPE 1 1 0
COLUMNTYPE 2 2 1
COMPRESSROWS 1 %LASTROW% 2 "1" "0" 1 1
SPLITCOLUMN 2 4 0 0 "_" 0

CALCULATESTATISTICS check = "SUM" 1 1 1 %LASTROW% 1
IF %check% != %Counting%
  DEF logtext = "Number of 'Electricity' meters per category not equal to total!! " + %check$% + " vs " + %Counting$%
  LOGLINE 1 %logtext$%
ENDIF

DEF logtext = "Number of active 'Electricity' telemetric meters: " + %Counting$% + " / " + %TM_meters_withNaNs$%
INFOLINE 1 %logtext$%
DEF totalcountpower = %Counting%
DEF totalcount = %totalcount% +  %Counting%

#DEF logtext = "Total active time series count: "+%totalcount$%
#INFOLINE 1 %logtext$%

# -------------------------------------------------------------------------------------------------
# Check amount of active 'Gas' telemetric meters
# -------------------------------------------------------------------------------------------------

NEWGRID 1 1 80
CLEARARRAY sql[]
DEF ActiveMetersTotal = ""

DEF sql[1] = "SELECT m.CODE, mp.PRODUCTNAME, seg.DESCRIPTION FROM "+%DATABASE_SCHEMA$%+".D_METER m "
DEF sql[2] = " LEFT JOIN "+%DATABASE_SCHEMA$%+".D_METERPRODUCT mp on m.METERPRODUCTNR = mp.NR "
DEF sql[3] = " LEFT JOIN "+%DATABASE_SCHEMA$%+".D_METERSEGMETER seglink on m.NR = seglink.METERNR "
DEF sql[4] = " LEFT JOIN "+%DATABASE_SCHEMA$%+".D_METERSEGMENT seg on seglink.SEGNR = seg.NR "
DEF sql[5] = " WHERE m.METERTYPE = 0 AND seg.ADMNR = 0 "
# Only check on startdate to exclude histotic meters, meters from the new year will be excluded based on data content
IF UPPERCASE(%DATABASE_TYPE$%) == "ORACLE"
  DEF sql[6] = " AND m.RECEIVEDATE >= TO_DATE('"+%StartYear$%+"','YYYY-MM-DD')"
ELSE
  IF  UPPERCASE(%DATABASE_TYPE$%) == "MSSQL"
    DEF sql[6] = " AND m.RECEIVEDATE >= CONVERT(DATETIME, '"+%StartYear$%+"', 120)"
  ENDIF
ENDIF
#IF UPPERCASE(%DATABASE_TYPE$%) == "ORACLE"
#  DEF sql[6] = " AND  m.STARTDATE < TO_DATE('"+%EndYear$%+"','YYYY-MM-DD')"
#  DEF sql[7] = " AND ( m.ENDDATE   > TO_DATE('"+%StartYear$%+"','YYYY-MM-DD') OR m.ENDDATE = TO_DATE('1899-12-30', 'YYYY-MM-DD') ) "
#ELSE
#  IF  UPPERCASE(%DATABASE_TYPE$%) == "MSSQL"
#    DEF sql[6] = " AND  m.STARTDATE < CONVERT (DATETIME, '"+%EndYear$%+"', 120)"
#    DEF sql[7] = " AND ( m.ENDDATE   > CONVERT (DATETIME, '"+%StartYear$%+"', 120) OR m.ENDDATE = CONVERT (DATETIME, '1899-12-30', 120) ) "
#  ENDIF
#ENDIF
DEF sql[8] = " AND  mp.PRODUCTID = 3"
DEF sql[0] = 8
MAKESTRINGOFARRAY sqlstr = sql[] %sql[0]% 1 " "
#INFOLINE 1 %sqlstr$%
DBSQLSELECT test = 1 1 %sqlstr$%
IF %test$% != "OK"
  ERRORLINE 1 %test$%
ENDIF
DEF TM_meters_withNaNs = %LASTROW%

######TESTING ############
#DELETEROWS 251 %LASTROW%
######TESTING ############

# ---------------------------------------
# Check how many meters actually received data
# Check all meters but to keep it from running in a time out we check the metes in batches.
# ---------------------------------------

DEF Counting = 0
DEF startrow = 1
DEF endrow = 0
DEF ActiveMetersTemp = ""
DEF ActiveMetersTotalCat = ""

DEF logtext = "This amount of 'Gas' meters will be checked for data: " + %LASTROW$%
INFOLINE 1 %logtext$%

WHILE %endrow% < %LASTROW%

  DEF endrow = %startrow% + %MaxNrMeters% - 1
  IF %endrow% > %LASTROW%
    DEF endrow = %LASTROW%
  ENDIF

  COUNTCOLUMNS MaxCol = 1
  COPYCELLSTOVAR ImportStr = 1 1 %startrow% %endrow%
  COPYCELLSTOVAR Data = 1 %MaxCol% %startrow% %endrow% ";" "|"
  COPYCELLS 1 %MaxCol% 1 %LASTROW%

  # with this period and NaN count, you can easily check if a meter received any data this year.
  DBIMPORT test = %ImportStr$% "yyyy.mm.dd" "hh:mm" 1 %StartYear$% %EndYear$% DX 0 0 1 1 "0" "" "" "0" "0" "" "0" "0"
  IF %test% < 0
    DEF logtext = "Count before block: " + %Counting$%
    INFOLINE 1 %logtext$%
    DEF logtext = "Checked < " + %startrow$%
    INFOLINE 1 %logtext$%
    DEF logtext = "Error on DBIMPORT " + %test$%
    ERRORLINE 1 %logtext$%
  ENDIF

  COUNTCOLUMNS LastColumn = 1
  REPLACE "0" "" 3 %LastColumn% 2 %LASTROW%
  FOR x = 3 TO %LastColumn%
    GRIDANALYSIS 1 %x% %x% 2 %LASTROW% 0 1 0 1 1 0 0
    DEF CountDaysValues = %ANALYSEPOSVALUES% + %ANALYSENEGVALUES% + %ANALYSENREMPTYCELLS%
    IF (%CountDaysValues%<14)
       WRITECELLS "NaN" %x% %x% 2 %LASTROW% 0
    ELSE
      IF (%CountDaysValues%>0)
        REPLACE "NaN" "0" %x% %x% 2 %LASTROW%
      ENDIF
    ENDIF
  NEXT
  COMPRESSROWS 2 %LASTROW% 0 1 0

  # remove empty meters
  DELETECOLUMNS 1 2
  COUNTCOLUMNS maxcol = 1
  MATRIX2COLUMN 1 %maxcol% 1 %LASTROW% 1
  COLUMN2MATRIX 1 1 %LASTROW% 0 2
  #
  PASTECELLSFROMVAR Data 3 1 ";" "|"
  DELETEROWS 1 %LASTROW% 2 "NaN" 1
  # add remaining meters to count an reset the grid
  DEF Counting = %Counting% + %LASTROW%
  IF %LASTROW% > 0

    COPYCELLSTOVAR ActiveMetersTemp = 1 1 1 %LASTROW% ","
    DEF ActiveMetersTotal = %ActiveMetersTotal$% + "," + %ActiveMetersTemp$%
    DEF nextrow = %LASTROW% + 1
    PASTECELLSFROMVAR ActiveMetersTotalCat 3 %nextrow% ";" "|"
    COPYCELLSTOVAR ActiveMetersTotalCat = 3 5 1 %LASTROW% ";" "|"

  ENDIF
  DEF startrow = %startrow% + %MaxNrMeters%
  NEWGRID 1 1 80
  PASTECELLS 1 1
  IF %startrow% > %LASTROW%
    # check if we are done
    BREAK
  ENDIF
  DEF logtext = "Number of meters checked for data: "+%startrow$%+"/"+ %LASTROW$%
  INFOLINE 1 %logtext$%

ENDWHILE

NEWGRID 1 1 80
PASTECELLSFROMVAR ActiveMetersTotalCat 1 1 ";" "|"
COLUMNTYPE 1 1 0
COLUMNTYPE 2 3 1
SORT 1 3 1 %LASTROW% 0 1 2 0
SORT 1 3 1 %LASTROW% 0 1 3 2

JOINCOLUMNS 2 3 1 %LASTROW% 1_
WRITECELLS "1" 1 1 1 %LASTROW%
COLUMNTYPE 1 1 0
COLUMNTYPE 2 2 1
COMPRESSROWS 1 %LASTROW% 2 "1" "0" 1 1
SPLITCOLUMN 2 4 0 0 "_" 0

CALCULATESTATISTICS check = "SUM" 1 1 1 %LASTROW% 1
IF %check% != %Counting%
  DEF logtext = "Number of 'Gas' meters per category not equal to total!! " + %check$% + " vs " + %Counting$%
  LOGLINE 1 %logtext$%
ENDIF

DEF logtext = "Number of active 'Gas' telemetric meters: " + %Counting$% + " / " + %TM_meters_withNaNs$%
INFOLINE 1 %logtext$%
DEF totalcountgas = %Counting%
DEF totalcount = %totalcount% +  %Counting%

DEF logtext = "Total active time series count: "+%totalcount$%
INFOLINE 1 %logtext$%

#Export result
NEWGRID 10 10 64
WRITECELLS %TMTpower$% 2 2 2 2
WRITECELLS "Total TMT Power" 1 1 2 2
WRITECELLS %TMTgas$% 2 2 3 3
WRITECELLS "Total TMT Gas" 1 1 3 3
WRITECELLS %pgppower$% 2 2 4 4
WRITECELLS "Total profiled gridpoints power" 1 1 4 4
WRITECELLS %pgpgas$% 2 2 5 5
WRITECELLS "Total profiled gridpoints gas" 1 1 5 5
WRITECELLS %totsales$% 2 2 6 6
WRITECELLS "Total sales contract" 1 1 6 6
WRITECELLS %totsales_wogp$% 2 2 7 7
WRITECELLS "Total sales contract WITHOUT linked gridpoints" 1 1 7 7
WRITECELLS %NrGPpower$% 2 2 8 8
WRITECELLS "Total active Electricity gridpoints" 1 1 8 8
WRITECELLS %NrGPgas$% 2 2 9 9
WRITECELLS "Total active Gas gridpoints" 1 1 9 9
WRITECELLS %totalcountpower$% 2 2 10 10
WRITECELLS "Total active Electricity timeseries" 1 1 10 10
WRITECELLS %totalcountgas$% 2 2 11 11
WRITECELLS "Total active Gas timeseries" 1 1 11 11
COPYCELLSTOVAR KeepGrid = 1 5 1 %LASTROW% ";" "|"

NEXT


# Store the data in the report file
GRIDTOEXCEL 1 3 1 %LASTROW% A2 %DATAFILE$%

#Bodytext for email
NEWGRID 10 10 100
DEF BodyText = PATHWITHSLASH(%Folder$%) + "BodyText.txt"
IF FILEEXISTS(%BodyText$%)
  DELETEFILE %BodyText$%
  SLEEP 500
  # Check if file is deleted. If not, create errorline
  IF FILEEXISTS(%BodyText$%)
    DEF logtext = "Bodytext file '" + %BodyText$% + "' could not be deleted! Script stops!"
    LOGLINE 1 %logtext$%
  ENDIF
ENDIF

DEF text = "Please find the attached excel file"
WRITECELLS %text$% 1 1 1 1
# Create the body text file
SAVE %BodyText$% 1 1 1 %LASTROW% 5

# Send the e-mail
DEF Subject  = "Gridpoints, sales contract, active timeseries details for the period " + %Enddate$%+ " to " + %Startdate$%+ "."
FUNC_SEND_MAIL result2 = %MAIL$% %Subject$% %Sender$% %CC$% %BodyText$% %DATAFILE$%
IF (%result$% != "")
  DEF logtext = "Error during sending e-mail through SMTP (error: " + %result$% + "). Script stops!"
  LOGLINE 1 %logtext$%
ELSE
  DEF logtext = "Stop process to stop it from sending multiple emails."
  STOP
ENDIF

#----------------------------------------- END OF SCRIPT ----------------------------------------------------------------------

